name: 'Svelte'
scopeName: 'source.svelte',
type: 'tree-sitter'
parser: 'tree-sitter-svelte'

fileTypes: ['svelte']

injectionRegex: '^svelte$'

comments:
  start: '<!--'
  end: '-->'

folds: [
  {
    type: 'comment'
  }
  {
    type: ['start_tag', 'raw_start_tag', 'self_closing_tag'],
    start: {index: 1},
    end: {index: -1}
  }
  {
    type: ['element', 'raw_element', 'script_element', 'style_element'],
    start: {index: 0},
    end: {index: -1}
  }
  {
    type: [
      'if_statement'
      'else_if_statement'
      'else_statement'
      'await_statement'
      'then_statement'
      'catch_statement'
    ]
  }
]

scopes:
  'document': 'source.svelte',
  # 'fragment': 'source.html'
  tag_name: [
    # {match: /^[A-Z]/, scopes: 'support.type'}
    # {match: /^[A-Z]/, scopes: 'meta.class'}
    {match: /^[<\s]*[A-Z]/, scopes: 'support.type'}
    'entity.name.tag'
  ]
  # 'tag_name': 'entity.name.tag'
  'erroneous_end_tag_name': 'invalid.illegal'
  'doctype': 'meta.tag.doctype.html'
  # 'attribute_name': 'entity.other.attribute-name'
  attribute_name: [
    {match: /^\{.*\}$/, scopes: 'source.js'}
    'entity.other.attribute-name'
  ]
  'attribute_value': 'string.html'
  'comment': 'comment.block.html'

  '
    start_tag > "<",
    end_tag > "</"
  ': 'punctuation.definition.tag.begin'
  '
    start_tag > ">",
    end_tag > ">"
  ': 'punctuation.definition.tag.end'

  'attribute > "="': 'punctuation.separator.key-value.html'

  # quoted_attribute_value has three child nodes: ", attribute_value, and ".
  # Target the first and last.
  # Single quotes and double quotes are targeted in separate selectors because
  # of quote-escaping difficulties.
  "quoted_attribute_value > '\"':nth-child(0)": 'punctuation.definition.string.begin'
  'quoted_attribute_value > "\'":nth-child(0)': 'punctuation.definition.string.begin'
  "quoted_attribute_value > '\"':nth-child(2)": 'punctuation.definition.string.end'
  'quoted_attribute_value > "\'":nth-child(2)': 'punctuation.definition.string.end'

  '''
  special_block_keyword,
  then,
  catch,
  as,
  ''': 'keyword.control'

  '''
  if_start_expr > "{",
  if_start_expr > "#",
  if_start_expr > "}",
  if_end_expr > "{",
  if_end_expr > "/",
  if_end_expr > "}",
  else_if_expr > "{",
  else_if_expr > "#",
  else_if_expr > "}",
  else_expr > "{",
  else_expr > "#",
  else_expr > "}",
  #''': 'entity.operator'
  # ''': 'constant.character.code'
  # ''': 'constant.escape'

  'expression > "{"': 'punctuation.section.embedded.svelte'
  'expression > "}"': 'punctuation.section.embedded.svelte'
  # 'expression > raw_text_expr': 'entity.name.tag'

  'attribute > attribute_name > "{", attribute > attribute_name > "}"':
    match: /^\{|\}$/
    scopes: 'punctuation.section.embedded.svelte'

  # 'attribute > attribute_name': {
  #   match: /^\{.*\}$/
  #   # scopes: 'punctuation.definition.block.begin.svelte'
  #   scopes: 'punctuation.section.embedded.svelte'
  # }

  # 'expression > raw_text_expr': {
  #   match: /^[0-9._-\w]+$/
  #   scopes: 'constant.numeric.decimal.svelte'
  # }
  # 'expression > raw_text_expr': {
  #   match: /^(".+"|'.+')$/
  #   scopes: 'string.quoted.svelte'
  # }
